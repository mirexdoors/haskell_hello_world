import Data.Function

--В модуле Data.Function определена полезная функция высшего порядка
--
--on :: (b -> b -> c) -> (a -> b) -> a -> a -> c
--on op f x y = f x `op` f y
--Она принимает четыре аргумента: бинарный оператор с однотипными аргументами (типа b), функцию f :: a -> b, возвращающую значение типа b, и два значения типа a. Функция on применяет f дважды к двум значениям типа a и передает результат в бинарный оператор.
--
--Используя on можно, например, записать функцию суммирования квадратов аргументов так:
sumSquares = (+) `on` (^2)

--Функция multSecond, перемножающая вторые элементы пар, реализована следующим образом
--
--multSecond = g `on` h
--
--g = undefined
--
--h = undefined
--Напишите реализацию функций g и h.
--
--GHCi> multSecond ('A',2) ('E',7)

multSecond = g `on` h

g = (*)
h = snd

--Реализуйте функцию on3, имеющую семантику, схожую с on, но принимающую в качестве первого аргумента трехместную функцию:
--
--on3 :: (b -> b -> b -> c) -> (a -> b) -> a -> a -> a -> c
--on3 op f x y z = undefined
--Например, сумма квадратов трех чисел может быть записана с использованием on3 так
--
--GHCi> let sum3squares = (\x y z -> x+y+z) `on3` (^2)
--GHCi> sum3squares 1 2 3
--14

on3 :: (b -> b -> b -> c) -> (a -> b) -> a -> a -> a -> c
on3 op f x y z = op (f x) (f y) (f z)

sum3squares = (\x y z -> x + y + z) `on3` (^2)

